package net.emof.building.web.service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import net.emof.building.admin.service.SqlToolseService;
import net.emof.building.dao.ConfsSubuserMapper;
import net.emof.building.dao.QnrMapper;
import net.emof.building.dao.QnrRejoinMapper;
import net.emof.building.model.ConfsSubuser;
import net.emof.building.model.Qnr;
import net.emof.building.model.QnrRejoin;
import net.emof.building.util.DataMap;
import net.emof.building.util.ToolsUtil;

@Service
public class QnrRejoin_web_Service extends SqlToolseService {
	
	// log4j日志
	private final Logger logger = Logger.getLogger(this.getClass());
	
	@Autowired
	private QnrRejoinMapper rejoinMapper;
	@Autowired
	private ConfsSubuserMapper subuserMapper;
	@Autowired
	private QnrMapper qnrMapper;
	
	
	/**
	 * 提交会议问题信息
	 * @author xilongfei
	 * @creation 2017年12月25日
	 * @param rejoins	问题信息集合
	 * @param confid	会议ID
	 * @param qnrid		问卷ID
	 * @param phone		手机号
	 * @return
	 * @throws Exception
	 */
	@Transactional(rollbackFor=Exception.class)
	public DataMap insertQnrRejoin(List<QnrRejoin> rejoins, String confid, String qnrid, String phone)throws Exception{
		DataMap datamap = new DataMap();
		if(rejoins==null || rejoins.size() < 1){
			datamap.addMsg_diy_obj(null, 1, "请回答问题,在提交");
			return datamap;
		}
		if(confid==null || confid.trim().equals("")) {
			datamap.addMsg_diy_obj(null, 6, "未找到会议信息");
			return datamap;
		}
		if(qnrid==null || qnrid.trim().equals("")) {
			datamap.addMsg_diy_obj(null, 6, "未找到问卷信息");
			return datamap;
		}
		if(phone==null || phone.trim().equals("")) {
			datamap.addMsg_diy_obj(null, 6, "请填写您的手机号");
			return datamap;
		}
		ConfsSubuser subuser = subuserMapper.selectConfsUserByphone(phone,confid);
		if(subuser == null) {
			datamap.addMsg_diy_obj(null, 6, "你还未报名,不能进行此操作");
			return datamap;
		}
		Qnr qnr = qnrMapper.selectByPrimaryKey(confid);
		if(qnr==null) {
			datamap.addMsg_diy_obj(null, 6, "该会议以不存在");
			return datamap;
		}
		if(subuser.getQnr()==1 && qnr!=null && qnr.getIsphone()==1) {
			datamap.addMsg_diy_obj(null, 6, "此问卷调查您已作答");
			return datamap;
		}
		int num = 0;
		for (int i = 0; i < rejoins.size(); i++) {
			rejoins.get(i).setId(ToolsUtil.get_diy_ID());
			rejoins.get(i).setConfsid(confid);
			rejoins.get(i).setCreatetime(new Date());
			rejoins.get(i).setQnrid(qnrid);
			rejoins.get(i).setCsid(subuser.getId());	
			num = rejoinMapper.insertSelective(rejoins.get(i));
			if(num < 1 ) {
				logger.error("【提交问题信息-添加回答信息】,信息位置" + this.getClass().getName()
						+ Thread.currentThread().getStackTrace()[1].getMethodName());
				new Exception("提交问题信息失败");
				datamap.addMsg_diy_list(null, 6, "提交失败,请重试");
				return datamap;
			}
		}
		subuser.setQnr(1);
		num = subuserMapper.updateByPrimaryKeySelective(subuser);
		if(num < 1 ) {
			logger.error("【提交问题信息-修改报名用户设置 】,信息位置" + this.getClass().getName()
					+ Thread.currentThread().getStackTrace()[1].getMethodName());
			new Exception("提交问题信息失败");
			datamap.addMsg_diy_list(null, 6, "提交失败,请重试");
			return datamap;
		}
		datamap.addMsg_diy_obj(null, 0, "您的调查信息已提交");
		return datamap;
	}
	

}
