package net.emof.building.web.service;

import net.emof.building.admin.customEXC.EhCacheSessiconException;
import net.emof.building.admin.service.SqlToolseService;
import net.emof.building.dao.ConfsBackMapper;
import net.emof.building.ehcache.EhSessicon;
import net.emof.building.model.ConfsBack;
import net.emof.building.model.Users;
import net.emof.building.util.DataMap;
import net.emof.building.util.ToolsUtil;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.Map;

/**
 * Copyright (C), 2015-2017, 易魔方有限公司
 * FileName: ConfsBack_web_Service
 * Author:   anshiyuan
 * Date:     2017/12/18 下午3:24
 * Description:
 * History:
 */
@Service
public class ConfsBack_web_Service extends SqlToolseService {

    @Autowired
    private ConfsBackMapper confsBackMapper;

    // log4j日志
    private final Logger logger = Logger.getLogger(this.getClass());


    public DataMap listpage(String confsid) {
        DataMap dataMap = new DataMap();
        if (confsid == null || confsid.trim().equals("")) {
            dataMap.addMsg_diy_obj(null, 6, "未找到会议信息");
            return dataMap;
        }

        StringBuffer table_name = new StringBuffer(" confs_back obj");
        StringBuffer find = new StringBuffer(" obj.imgs");
        StringBuffer where = new StringBuffer(" 1=1 AND obj.isdelete=1 AND obj.confsid='" + confsid + "'");
        Map<String, Object> map = this.selectMap(table_name.toString(), find.toString(), where.toString());

        dataMap.addMsg_obj(map, 0);

        return dataMap;
    }


    /**
     * 上传签到图片
     *
     * @param token   用户
     * @param confsid
     * @param imgs
     * @return
     */
    public DataMap addConfsBack(String token, String confsid, String imgs) {
        DataMap dataMap = new DataMap();
        Users users;
        if (token == null || token.trim().equals("")) {
            dataMap.addMsg_diy_obj(null, 6, "未识别标识");
            return dataMap;
        }
        try {
            users = EhSessicon.getTokenInfo(token);
            if (users == null) {
                dataMap.addMsg_diy_list(null, 5, "登录超时，请重新登录");
                return dataMap;
            }
        } catch (EhCacheSessiconException e) {
            logger.error("【会议嘉宾列表 信息异常】执行会议嘉宾获取用户信息失败,信息位置" + this.getClass().getName()
                    + Thread.currentThread().getStackTrace()[1].getMethodName());
            dataMap.addMsg_diy_list(null, 5, "登录超时，请重新登录");
            return dataMap;
        }

        if (confsid == null || confsid.trim().equals("")) {
            dataMap.addMsg_diy_obj(null, 6, "未找到会议信息");
            return dataMap;
        }

        if (imgs == null || imgs.trim().equals("")) {
            dataMap.addMsg_diy_obj(null, 6, "请选择要上传的图片");
            return dataMap;
        }

        String id = ToolsUtil.get_diy_ID(); //主键
        Date createtime = new Date(System.currentTimeMillis());
        ConfsBack confsBack = new ConfsBack();
        confsBack.setId(id);
        confsBack.setConfsid(confsid);
        confsBack.setCreatetime(createtime);
        confsBack.setUserid(users.getId());
        confsBack.setCodes(users.getCodes());
        confsBack.setImgs(imgs);

        int result = this.confsBackMapper.insertSelective(confsBack);
        if (result < 1) {
            dataMap.addMsg_diy_obj(null, 6, "保存失败，请重新提交");
            return dataMap;
        }

        dataMap.addMsg_obj(id, 0);

        return dataMap;
    }


}