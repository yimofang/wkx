package net.emof.building.web.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import net.emof.building.admin.customEXC.EhCacheSessiconException;
import net.emof.building.admin.service.AdminUsersService;
import net.emof.building.ehcache.EhSessicon;
import net.emof.building.model.Users;
import net.emof.building.util.DataMap;
import net.emof.building.util.DesEncryption;
import net.emof.building.util.MatrixToImageWriter;
import sun.misc.BASE64Decoder;

/**
 * 移动端通用上传
 * 
 * @author baikun
 * @creation 2017年12月13日
 */
@Controller
@RequestMapping("")
public class ImgFileUpload_web_Controller {

	// localhost:8080/conf/login_web.do?name=xilongfei&pass=123456
	// 日志
	private final Logger logger = Logger.getLogger(this.getClass());

	@Autowired
	private AdminUsersService aduservice;
	/**
	 * 通用 文件上传接口
	 * 
	 * @author baikun
	 * @creation 2017年12月13日
	 * @param myfiles
	 *            文件流
	 * @param token
	 *            身份密钥
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/imgupload")
	@ResponseBody
	public Map<String, Object> imgupload(@RequestParam(value = "myfiles") MultipartFile myfiles,
			@RequestParam(value = "token") String token, HttpServletRequest request, HttpServletResponse response) {
		DataMap dataMap = new DataMap();
		try {
			if (EhSessicon.getTokenInfo(token) == null) {
				dataMap.addMsg_diy_obj(null, 5, "登陆超时，请重新登陆");
				return dataMap.data;
			}
		} catch (EhCacheSessiconException e1) {
			logger.error("【上传方法异常】信息位置" + this.getClass().getName() + " "
					+ Thread.currentThread().getStackTrace()[1].getMethodName() + " nubmer:"
					+ new Throwable().getStackTrace()[0].getLineNumber() + "/n" + "【异常信息】" + e1.getMessage());
			dataMap.addMsg_diy_obj(null, 5, "登陆超时，请重新登陆");
			return dataMap.data;
		}

		Map<String, Object> resMap = new HashMap<String, Object>();
		if (myfiles.getSize() >= 1110475) {
			dataMap.addMsg_diy_obj(null, 1, "文件过大，上传失败,文件请保证小于1MB");
			return dataMap.data;
		}
		String path = request.getContextPath();
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path;
		Date dt = new Date();
		Long time = dt.getTime();
		if (myfiles != null) {
			// 获取保存的路径，
			String realPath = request.getSession().getServletContext().getRealPath("/upload/");
			if (myfiles.isEmpty()) {
				dataMap.addMsg_diy_obj(null, 1, "文件上传失败");
				return dataMap.data;
			} else {
				// 上传文件重命名
				String originalFilename = time.toString().substring(time.toString().length() - 8,
						time.toString().length());
				originalFilename = originalFilename.concat(".");
				originalFilename = originalFilename.concat(myfiles.getOriginalFilename().toString()
						.substring(myfiles.getOriginalFilename().toString().indexOf(".") + 1));
				try {
					// 这里使用Apache的FileUtils方法来进行保存
					FileUtils.copyInputStreamToFile(myfiles.getInputStream(), new File(realPath, originalFilename));
					resMap.put("filename", originalFilename);
					resMap.put("path", basePath + "/upload/");
					dataMap.addMsg_diy_map(resMap, 0, "上传成功");

				} catch (IOException e) {
					dataMap.addMsg_diy_obj(null, 1, "文件上传失败");
					e.printStackTrace();
				}
			}

		}
		return dataMap.data;
	}

	/**
	 * 通用 Base64 字符流上传方法
	 * 
	 * @author baikun
	 * @creation 2017年12月13日
	 * @param imgStr
	 *            字符流
	 * @param token
	 *            身份密钥
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/imgbase")
	@ResponseBody
	public Map<String, Object> imgBase64upload(@RequestParam(value = "imgStr") String imgStr,
			@RequestParam(value = "token") String token, HttpServletRequest request, HttpServletResponse response) {
		DataMap dataMap = new DataMap();
		if (imgStr == null || imgStr.trim().length() <= 1) {
			dataMap.addMsg_diy_obj(null, 6, "上传失败，请检查上传文件格式 jpg 或 png");
			return dataMap.data;
		}
		try {
			if (EhSessicon.getTokenInfo(token) == null) {
				dataMap.addMsg_diy_obj(null, 5, "登陆超时，请重新登陆");
				return dataMap.data;
			}
		} catch (EhCacheSessiconException e1) {
			logger.error("【imgBase64upload上传方法异常】信息位置" + this.getClass().getName() + " "
					+ Thread.currentThread().getStackTrace()[1].getMethodName() + " nubmer:"
					+ new Throwable().getStackTrace()[0].getLineNumber() + "/n" + "【异常信息】" + e1.getMessage());
			dataMap.addMsg_diy_obj(null, 5, "登陆超时，请重新登陆");
			return dataMap.data;
		}
		Map<String, Object> resMap = new HashMap<String, Object>();

		String imgBase64 = imgStr.substring(imgStr.indexOf(",") + 1, imgStr.length()); // tu
		String extension = imgStr.substring(imgStr.indexOf("image/") + 6, imgStr.indexOf(";"));// 扩展名
		// 保存路径
		String path = request.getServletContext().getRealPath("/upload/");
		// 生成jpeg图片
		Long time = new Date().getTime();
		String fileName = time.toString().substring(time.toString().length() - 8, time.toString().length()) + "."
				+ extension;
		try {
			File localFile = new File(path + "/" + fileName);
			if (!localFile.getParentFile().exists()) {
				localFile.getParentFile().mkdirs();
			}
			byte[] bytes = new BASE64Decoder().decodeBuffer(imgBase64); // Base64解码
			for (int i = 0; i < bytes.length; ++i) {
				if (bytes[i] < 0) {// 调整异常数据
					bytes[i] += 256;
				}
			}
			OutputStream out = new FileOutputStream(localFile);
			out.write(bytes);
			out.flush();
			out.close();
			resMap.put("filename", fileName);
			resMap.put("path", path);
			dataMap.addMsg_diy_map(resMap, 0, "上传成功");
		} catch (Exception e) {
			logger.error("【imgBase64upload上传方法异常】信息位置" + this.getClass().getName() + " "
					+ Thread.currentThread().getStackTrace()[1].getMethodName() + " nubmer:"
					+ new Throwable().getStackTrace()[0].getLineNumber() + "/n" + "【异常信息】" + e.getMessage());
			dataMap.addMsg_diy_obj(null, 6, "上传失败，请检查文件格式");
			return dataMap.data;

		}
		return dataMap.data;
	}

	
	/**
	 * 通用 Base64 字符流上传方法
	 * 
	 * @author wkx
	 * @creation 2018年6月20日
	 * @param imgStr
	 *            字符流
	 * @param token
	 *            身份密钥
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/imgbasePc")
	@ResponseBody
	public Map<String, Object> imgBase64uploadPc(@RequestParam(value = "imgStr") String imgStr,
			@RequestParam(value = "confid", required = true) String confid,
			@RequestParam(value = "token") String token, HttpServletRequest request, HttpServletResponse response) {
		DataMap dataMap = new DataMap();
		if (imgStr == null || imgStr.trim().length() <= 1) {
			dataMap.addMsg_diy_obj(null, 6, "上传失败，请检查上传文件格式 jpg 或 png");
			return dataMap.data;
		}
		try {
			if (EhSessicon.getTokenInfo(token) == null) {
				dataMap.addMsg_diy_obj(null, 5, "登陆超时，请重新登陆");
				return dataMap.data;
			}
		} catch (EhCacheSessiconException e1) {
			logger.error("【imgBase64upload上传方法异常】信息位置" + this.getClass().getName() + " "
					+ Thread.currentThread().getStackTrace()[1].getMethodName() + " nubmer:"
					+ new Throwable().getStackTrace()[0].getLineNumber() + "/n" + "【异常信息】" + e1.getMessage());
			dataMap.addMsg_diy_obj(null, 5, "登陆超时，请重新登陆");
			return dataMap.data;
		}
		Map<String, Object> resMap = new HashMap<String, Object>();

		String imgBase64 = imgStr.substring(imgStr.indexOf(",") + 1, imgStr.length()); // tu
		String extension = imgStr.substring(imgStr.indexOf("image/") + 6, imgStr.indexOf(";"));// 扩展名
		// 保存路径
		String path = request.getServletContext().getRealPath("/upload/");
		// 生成jpeg图片
		Long time = new Date().getTime();
		String fileName = time.toString().substring(time.toString().length() - 8, time.toString().length()) + "."
				+ extension;
		try {
			File localFile = new File(path + "/" + fileName);
			if (!localFile.getParentFile().exists()) {
				localFile.getParentFile().mkdirs();
			}
			byte[] bytes = new BASE64Decoder().decodeBuffer(imgBase64); // Base64解码
			for (int i = 0; i < bytes.length; ++i) {
				if (bytes[i] < 0) {// 调整异常数据
					bytes[i] += 256;
				}
			}
			OutputStream out = new FileOutputStream(localFile);
			out.write(bytes);
			out.flush();
			out.close();
			resMap.put("filename", fileName);
			resMap.put("path", path);
			dataMap.addMsg_diy_map(resMap, 0, "上传成功");
		} catch (Exception e) {
			logger.error("【imgBase64upload上传方法异常】信息位置" + this.getClass().getName() + " "
					+ Thread.currentThread().getStackTrace()[1].getMethodName() + " nubmer:"
					+ new Throwable().getStackTrace()[0].getLineNumber() + "/n" + "【异常信息】" + e.getMessage());
			dataMap.addMsg_diy_obj(null, 6, "上传失败，请检查文件格式");
			return dataMap.data;

		}
		String filename=(String) dataMap.data.get("filename");
		System.out.println("filename="+filename);
		// url : Urlstr + 'imgbase.do',
		//sendPost("http://localhost:8080/conf/add_backPc.do?confid="+confid+"&token="+token+"&imgs="+filename, "");
		String result=sendGet("http://localhost:8080/conf/back_web/add_backPc.do", "confid="+confid+"&token="+token+"&imgs="+filename);
		System.out.println("result="+result);
		return dataMap.data;
	}
	
	
	   public static String sendGet(String url, String param) {
	        String result = "";
	        BufferedReader in = null;
	        try {
	            String urlNameString = url + "?" + param;
	            URL realUrl = new URL(urlNameString);
	            // 打开和URL之间的连接
	            URLConnection connection = realUrl.openConnection();
	            // 设置通用的请求属性
	            connection.setRequestProperty("accept", "*/*");
	            connection.setRequestProperty("connection", "Keep-Alive");
	            connection.setRequestProperty("user-agent",
	                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
	            // 建立实际的连接
	            connection.connect();
	            // 获取所有响应头字段
	            Map<String, List<String>> map = connection.getHeaderFields();
	            // 遍历所有的响应头字段
	            for (String key : map.keySet()) {
	                System.out.println(key + "--->" + map.get(key));
	            }
	            // 定义 BufferedReader输入流来读取URL的响应
	            in = new BufferedReader(new InputStreamReader(
	                    connection.getInputStream()));
	            String line;
	            while ((line = in.readLine()) != null) {
	                result += line;
	            }
	        } catch (Exception e) {
	            System.out.println("发送GET请求出现异常！" + e);
	            e.printStackTrace();
	        }
	        // 使用finally块来关闭输入流
	        finally {
	            try {
	                if (in != null) {
	                    in.close();
	                }
	            } catch (Exception e2) {
	                e2.printStackTrace();
	            }
	        }
	        return result;
	    }
    public static String sendPost(String url, String param) {
        PrintWriter out = null;
        BufferedReader in = null;
        String result = "";
        try {
            URL realUrl = new URL(url);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            conn.setRequestProperty("accept", "*/*");
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("user-agent",
                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
            // 发送POST请求必须设置如下两行
            conn.setDoOutput(true);
            conn.setDoInput(true);
            // 获取URLConnection对象对应的输出流
            out = new PrintWriter(conn.getOutputStream());
            // 发送请求参数
            out.print(param);
            // flush输出流的缓冲
            out.flush();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(
                    new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
            System.out.println("发送 POST 请求出现异常！"+e);
            e.printStackTrace();
        }
        //使用finally块来关闭输出流、输入流
        finally{
            try{
                if(out!=null){
                    out.close();
                }
                if(in!=null){
                    in.close();
                }
            }
            catch(IOException ex){
                ex.printStackTrace();
            }
        }
        return result;
    }    

	
	
	/**
	 * 二维码
	 * 
	 * @author baikun
	 * @creation 2017年12月14日
	 * @param linkenc   链接使用 Ees加密 
	 * @param response
	 * @param width
	 * @param height
	 */
	@RequestMapping("/qrcode")
	public void qrcode(@RequestParam(value = "link", required = true) String linkenc, HttpServletResponse response) {
		try {
			DesEncryption des = new DesEncryption();// 使用默认密钥
			String url = des.decrypt(linkenc);//解密失败
			MatrixToImageWriter.createRqCode(url, response.getOutputStream());
		} catch (Exception e) {
			logger.error(String.format("生成二维码失败： url： %s", linkenc), e);
		}
	}
	
	
	/**
	 * 获取用户基本信息
	 * @author xilongfei
	 * @creation 2018年1月2日
	 * @param token		用户识别标识
	 */
	@ResponseBody
	@RequestMapping("/userInfo")
	public Map<String, Object> userInfo(@RequestParam(value = "token", required = true) String token) {
		DataMap map = new DataMap();
		if(token==null || token.trim().equals("")) {
			map.addMsg_diy_obj(null, 6, "上传失败，请检查文件格式");
			return map.data;
		}
		Users users = null;
		try {
			users = EhSessicon.getTokenInfo(token);
			if (users == null) {
				map.addMsg_diy_obj(null, 5, "登陆超时，请重新登陆");
				return map.data;
			}
		} catch (EhCacheSessiconException e1) {
			logger.error("【上传方法异常】信息位置" + this.getClass().getName() + " "
					+ Thread.currentThread().getStackTrace()[1].getMethodName() + " nubmer:"
					+ new Throwable().getStackTrace()[0].getLineNumber() + "/n" + "【异常信息】" + e1.getMessage());
			map.addMsg_diy_obj(null, 5, "登陆超时，请重新登陆");
			return map.data;
		}
		List<Map<String, Object>> organiz_list = aduservice.organiz_list(1);
		Map<String, Object> row = new HashMap<>();
		row.put("headimg", users.getHeadimg());
		row.put("organiz", users.getDatum().get("organizstr"));
		row.put("usersid", users.getId());
		row.put("organizlist", organiz_list);
		map.addMsg_map(row, 0);
		return map.data;
	}
	
}
